https://financialmodelingprep.com/stable/income-statement?symbol=AAPL&apikey=VAaDqPELXV0qqRYq0DFXhD1RSYFnjjXU

Query Parameter = symbol : String, limit : number, period : String

[
{
"date": "2024-09-28",
"symbol": "AAPL",
"reportedCurrency": "USD",
"cik": "0000320193",
"filingDate": "2024-11-01",
"acceptedDate": "2024-11-01 06:01:36",
"fiscalYear": "2024",
"period": "FY",
"netIncome": 93736000000,
"depreciationAndAmortization": 11445000000,
"deferredIncomeTax": 0,
"stockBasedCompensation": 11688000000,
"changeInWorkingCapital": 3651000000,
"accountsReceivables": -5144000000,
"inventory": -1046000000,
"accountsPayables": 6020000000,
"otherWorkingCapital": 3821000000,
"otherNonCashItems": -2266000000,
"netCashProvidedByOperatingActivities": 118254000000,
"investmentsInPropertyPlantAndEquipment": -9447000000,
"acquisitionsNet": 0,
"purchasesOfInvestments": -48656000000,
"salesMaturitiesOfInvestments": 62346000000,
"otherInvestingActivities": -1308000000,
"netCashProvidedByInvestingActivities": 2935000000,
"netDebtIssuance": -5998000000,
"longTermNetDebtIssuance": -9958000000,
"shortTermNetDebtIssuance": 3960000000,
"netStockIssuance": -94949000000,
"netCommonStockIssuance": -94949000000,
"commonStockIssuance": 0,
"commonStockRepurchased": -94949000000,
"netPreferredStockIssuance": 0,
"netDividendsPaid": -15234000000,
"commonDividendsPaid": -15234000000,
"preferredDividendsPaid": 0,
"otherFinancingActivities": -5802000000,
"netCashProvidedByFinancingActivities": -121983000000,
"effectOfForexChangesOnCash": 0,
"netChangeInCash": -794000000,
"cashAtEndOfPeriod": 29943000000,
"cashAtBeginningOfPeriod": 30737000000,
"operatingCashFlow": 118254000000,
"capitalExpenditure": -9447000000,
"freeCashFlow": 108807000000,
"incomeTaxesPaid": 26102000000,
"interestPaid": 0
}
]

const https = require('https');

const options = {
hostname: 'financialmodelingprep.com',
port: 443,
path: 'https://financialmodelingprep.com/stable/cash-flow-statement?symbol=AAPL&apikey=YOUR_API_KEY',
method: 'GET'
}

const req = https.request(options, (res) => {
res.on('data', (d) => {
process.stdout.write(d)
})
})

req.on('error', (error) => {
console.error(error)
})

req.end()

